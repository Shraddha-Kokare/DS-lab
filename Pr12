// Write program to implement a priority queue in C++ using an inorder list to
//  store the items in the queue. Create a class that includes the data items
//  (which should be template) and the priority (which should be int). The
//  inorder list should contain these objects, with operator <= overloaded so that
//  the items with highest priority appear at the beginning of the list (which will
//  make it relatively easy to retrieve the highest item.)
#include <iostream>
using namespace std;

template <typename T>
class Node {
public:
    T data;
    int priority;
    Node* next;

    Node(T d, int p) {
        data = d;
        priority = p;
        next = nullptr;
    }

    bool operator<=(const Node& other) {
        return this->priority <= other.priority;
    }
};

template <typename T>
class PriorityQueue {
private:
    Node<T>* head;

public:
    PriorityQueue() {
        head = nullptr;
    }

    void enqueue(T data, int priority) {
        Node<T>* newNode = new Node<T>(data, priority);

        if (head == nullptr || *newNode <= *head) {
            newNode->next = head;
            head = newNode;
        } else {
            Node<T>* temp = head;
            while (temp->next != nullptr && *temp->next <= *newNode) {
                temp = temp->next;
            }
            newNode->next = temp->next;
            temp->next = newNode;
        }

        cout << "Enqueued: " << data << " with priority: " << priority << endl;
    }

    void dequeue() {
        if (head == nullptr) {
            cout << "Queue is empty. Nothing to dequeue." << endl;
            return;
        }

        Node<T>* temp = head;
        head = head->next;
        cout << "Dequeued: " << temp->data << " with priority: " << temp->priority << endl;
        delete temp;
    }

    void display() {
        if (head == nullptr) {
            cout << "Queue is empty." << endl;
            return;
        }

        Node<T>* temp = head;
        cout << "Queue contents (highest priority first):" << endl;
        while (temp != nullptr) {
            cout << "Data: " << temp->data << ", Priority: " << temp->priority << endl;
            temp = temp->next;
        }
    }

    ~PriorityQueue() {
        while (head != nullptr) {
            Node<T>* temp = head;
            head = head->next;
            delete temp;
        }
    }
};

int main() {
    PriorityQueue<string> pq;

    pq.enqueue("Job1", 2);
    pq.enqueue("Job2", 4);
    pq.enqueue("Job3", 1);
    pq.enqueue("Job4", 3);

    cout << "\nPriority Queue: " << endl;
    pq.display();

    pq.dequeue();
    pq.dequeue();

    cout << "\nPriority Queue after dequeue: " << endl;
    pq.display();

    return 0;
}
